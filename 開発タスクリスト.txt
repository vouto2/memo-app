## シンプルメモアプリ 開発タスクリスト

仕様書に基づき、開発タスクを以下のステップに分割します。

---

### ステップ1: 基本ファイルの作成と設定

1.  **`index.html`の作成**: アプリケーションの骨格となるHTMLファイルを作成する。
2.  **`style.css`の作成**: 見た目を整えるためのCSSファイルを作成する。
3.  **`script.js`の作成**: アプリの動作ロジックを記述するJavaScriptファイルを作成する。
4.  **ファイルのリンク**: `index.html`ファイルから`style.css`と`script.js`を読み込むように、`<link>`タグと`<script>`タグを設定する。

---

### ステップ2: 画面レイアウトの作成 (HTML/CSS)

1.  **HTMLで骨格を作成**: `index.html`に、仕様書通りの2カラムレイアウト（左: ナビゲーション、右: コンテンツ）を`<div>`タグなどで記述する。
2.  **左カラムの要素を配置**: アプリタイトル(`<h1>`)、新規作成ボタン(`<button>`)、メモ一覧を表示するためのリスト(`<ul>`)を配置する。
3.  **右カラムの要素を配置**: タイトル入力欄(`<input type="text">`)、本文入力欄(`<textarea>`)、保存/更新ボタン(`<button>`)、削除ボタン(`<button>`)を配置する。
4.  **CSSでスタイリング**: `style.css`で、2カラムのレイアウト、配色、フォント、ボタンのデザインなど、基本的な見た目を整える。

---

### ステップ3: メモの保存機能の実装 (JavaScript)

1.  **DOM要素の取得**: `script.js`で、操作対象となるHTML要素（ボタン、入力欄など）を取得する。
2.  **イベントリスナーの設定**: 「保存/更新」ボタンにクリックイベントのリスナーを追加する。
3.  **値の取得**: ボタンがクリックされたら、入力欄のタイトルと本文の値を取得する。
4.  **データ整形**: 取得した値にユニークなID（例: `Date.now()`で取得したタイムスタンプ）を付けて、一つのオブジェクトとしてまとめる。
5.  **ローカルストレージへの保存**: 既存のメモ配列をローカルストレージから取得し、新しいメモオブジェクトを追加して、再度ローカルストレージに保存する。データはJSON形式で保存する。

---

### ステップ4: メモの読み込みと一覧表示機能の実装 (JavaScript)

1.  **一覧表示関数の作成**: メモの配列を受け取り、左カラムの`<ul>`内に`<li>`要素としてメモタイトルを動的に生成・表示する関数を作成する。
2.  **初期表示**: ページが読み込まれた際に、ローカルストレージから全メモデータを取得し、上記関数を呼び出して一覧を表示する。
3.  **詳細表示機能**: 一覧の各`<li>`要素にクリックイベントリスナーを追加する。クリックされたら、対応するメモのIDを元に全データから情報を探し、右カラムの入力欄にタイトルと本文を表示する。

---

### ステップ5: メモの更新機能の実装 (JavaScript)

1.  **新規/更新の判定**: 「保存/更新」ボタンがクリックされた際に、右カラムに表示されているメモが既存のものか（IDを持っているか）を判定するロジックを追加する。
2.  **データ更新**: 既存メモの場合、ローカルストレージ内の対応するIDのメモオブジェクトを、入力欄の新しい内容で上書きする。
3.  **画面の再描画**: 更新後、左カラムの一覧も最新のタイトルで再描画する。

---

### ステップ6: メモの削除機能の実装 (JavaScript)

1.  **イベントリスナーの設定**: 「削除」ボタンにクリックイベントのリスナーを追加する。
2.  **削除確認**: `window.confirm()`を使い、「本当に削除しますか？」という確認ダイアログを表示する。
3.  **データ削除**: ユーザーがOKを押したら、現在表示されているメモのIDを元に、ローカルストレージから対応するメモオブジェクトを削除する。
4.  **画面の再描画**: 削除後、右カラムの入力欄をクリアし、左カラムの一覧も更新する。

---

### ステップ7: 新規作成機能の実装 (JavaScript)

1.  **イベントリスナーの設定**: 「新規作成」ボタンにクリックイベントのリスナーを追加する。
2.  **画面のクリア**: ボタンがクリックされたら、右カラムのタイトルと本文の入力欄を空にする。
3.  **状態のリセット**: 現在選択中のメモIDなどをリセットし、次に「保存」ボタンが押されたときに新規保存として扱われるようにする。

---

### ステップ8: 仕上げとテスト

1.  **デザイン調整**: アプリ全体の使い勝手を見ながら、CSSでデザインを微調整する。
2.  **動作テスト**: 作成、一覧表示、詳細表示、更新、削除、新規作成の一連の機能が、仕様書通りに正しく動作するかを確認する。
3.  **リファクタリング**: コードを整理し、可読性や保守性を向上させる。
